'use client';

/**
 * @file [[proper featureNamePlural]] listing page
 * @module app/admin/[[featureNamePlural]]/page
 */

import React, { useState, useEffect } from 'react';
import {
  Box,
  Button,
  Typography,
  Container,
  Paper,
  TextField,
  InputAdornment,
  CircularProgress,
  Alert,
} from '@mui/material';
import { Add as AddIcon, Search as SearchIcon } from '@mui/icons-material';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import [[PascalFeatureName]]List from '@/components/admin/[[featureNamePlural]]/[[PascalFeatureName]]List';

/**
 * Renders the [[proper featureNamePlural]] admin listing page.
 * @returns {JSX.Element}
 */
export default function [[PascalFeatureNamePlural]]Page() {
  const router = useRouter();
  const [[[featureNamePlural]]], set[[[featureNamePlural]]] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [pagination, setPagination] = useState({
    page: 1,
    limit: 10,
    total: 0,
    pages: 0,
  });

  const fetch[[[featureNamePlural]]] = async (page = 1, search = '') => {
    try {
      setLoading(true);
      setError('');
      const queryParams = new URLSearchParams({
        page,
        limit: pagination.limit,
        sort: 'createdAt',
        order: 'desc',
      });
      if (search) {
        queryParams.append('search', search);
      }

      const response = await fetch(`/api/[[featureNamePlural]]?${queryParams.toString()}`);
      const result = await response.json();

      if (!result.success) {
        throw new Error(result.error || 'Failed to fetch [[featureNamePlural]]');
      }

      set[[[featureNamePlural]]](result.data.[[[featureNamePlural]]]);
      setPagination(result.data.pagination);
    } catch (err) {
      console.error('Error fetching [[featureNamePlural]]:', err);
      setError(err.message || 'An error occurred while fetching [[featureNamePlural]]');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetch[[[featureNamePlural]]](pagination.page, searchTerm);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [pagination.page, searchTerm]);

  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  const handleSearch = (e) => {
    e.preventDefault();
    fetch[[[featureNamePlural]]](1, searchTerm);
  };

  const handleCreateClick = () => {
    router.push('/admin/[[featureNamePlural]]/create');
  };

  const handle[[PascalFeatureName]]Click = (id) => {
    router.push(`/admin/[[featureNamePlural]]/${id}`);
  };

  return (
    <Container maxWidth="lg">
      <Box sx={{ py: 4 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>
          <Typography variant="h4" component="h1">
            [[proper featureNamePlural]]
          </Typography>
          <Button
            variant="contained"
            startIcon={<AddIcon />}
            onClick={handleCreateClick}
          >
            Create [[proper featureName]]
          </Button>
        </Box>

        <Paper sx={{ p: 3, mb: 4 }}>
          <form onSubmit={handleSearch}>
            <TextField
              fullWidth
              placeholder="Search [[featureNamePlural]]..."
              value={searchTerm}
              onChange={handleSearchChange}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchIcon />
                  </InputAdornment>
                ),
              }}
            />
          </form>
        </Paper>

        {error && (
          <Alert severity="error" sx={{ mb: 3 }}>
            {error}
          </Alert>
        )}

        {loading ? (
          <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>
            <CircularProgress />
          </Box>
        ) : (
          <[[PascalFeatureName]]List
            [[featureNamePlural]]={[[[featureNamePlural]]]}
            onItemClick={handle[[PascalFeatureName]]Click}
            pagination={pagination}
            onPageChange={(page) => setPagination((prev) => ({ ...prev, page }))}
            onLimitChange={(limit) => setPagination((prev) => ({ ...prev, limit, page: 1 }))}
            [[#if includeDelete]]
            onDeleteItem={async (id) => {
              if (window.confirm('Are you sure you want to delete this [[featureName]]?')) {
                try {
                  const response = await fetch(`/api/[[featureNamePlural]]/${id}`, {
                    method: 'DELETE',
                  });
                  const result = await response.json();

                  if (!result.success) {
                    throw new Error(result.error || 'Failed to delete [[featureName]]');
                  }

                  // Refresh the list
                  fetch[[[featureNamePlural]]](pagination.page, searchTerm);
                } catch (err) {
                  console.error('Error deleting [[featureName]]:', err);
                  setError(err.message || 'An error occurred while deleting the [[featureName]]');
                }
              }
            }}
            [[/if]]
          />
        )}
      </Box>
    </Container>
  );
}
