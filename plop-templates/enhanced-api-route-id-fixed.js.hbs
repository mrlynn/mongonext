/**
 * @file API routes for individual {{featureName}&#125; operations
 * @module app/api/{{featureNamePlural}&#125;/[id]
 */

import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';
import authOptions from '@/lib/auth/config';
import connectDB from '@/lib/db/connect';
import {{pascalCase featureName}&#125; from '@/models/{{featureName}&#125;.model';

/**
 * Helper function to check if ObjectId is valid
 * @param {string} id - The ID to validate
 * @returns {boolean} True if ID is valid, false otherwise
 */
function isValidObjectId(id) {
  return /^[0-9a-fA-F]{24}$/.test(id);
}

/**
 * Handle GET requests to fetch a single {{featureName}&#125; by ID
 * 
 * @async
 * @function GET
 * @param {Request} request - The incoming request
 * @param {Object} params - Route parameters
 * @param {string} params.id - {{pascalCase featureName}&#125; ID
 * @returns {Promise<NextResponse>} JSON response with {{featureName}&#125; data or error
 * 
 * @example
 * // Get a single {{featureName}&#125;
 * GET /api/{{featureNamePlural}&#125;/60d21b4667d0d8992e610c85
 */
export async function GET(request, { params }) {
  try {
    // Connect to database
    await connectDB();
    
    // Get ID from params
    const { id } = params;
    
    // Check if ID is valid
    if (!isValidObjectId(id)) {
      return NextResponse.json(
        { success: false, error: 'Invalid ID format' },
        { status: 400 }
      );
    }
    
    // Find {{featureName}&#125; by ID
    const {{featureName}&#125; = await {{pascalCase featureName}&#125;.findById(id);
    
    // Check if {{featureName}&#125; exists
    if (!{{featureName}&#125;) {
      return NextResponse.json(
        { success: false, error: '{{pascalCase featureName}&#125; not found' },
        { status: 404 }
      );
    }
    
    // Return success response
    return NextResponse.json({
      success: true,
      data: {{featureName}&#125;
    });
  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json(
      { success: false, error: error.message },
      { status: 500 }
    );
  }
}

/**
 * Handle PUT/PATCH requests to update a {{featureName}&#125;
 * 
 * @async
 * @function PUT
 * @param {Request} request - The incoming request with update data
 * @param {Object} params - Route parameters
 * @param {string} params.id - {{pascalCase featureName}&#125; ID
 * @returns {Promise<NextResponse>} JSON response with updated {{featureName}&#125; or error
 * 
 * @example
 * // Update a {{featureName}&#125;
 * PUT /api/{{featureNamePlural}&#125;/60d21b4667d0d8992e610c85
 * {
 *   "name": "Updated {{pascalCase featureName}&#125; Name",
 *   "description": "Updated description"
 * }
 */
export async function PUT(request, { params }) {
  return updateItem(request, params);
}

export async function PATCH(request, { params }) {
  return updateItem(request, params);
}

/**
 * Helper function for updating a {{featureName}&#125;
 */
async function updateItem(request, { params }) {
  try {
    // Check authentication
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json(
        { success: false, error: 'Authentication required' },
        { status: 401 }
      );
    }
    
    // Connect to database
    await connectDB();
    
    // Get ID from params
    const { id } = params;
    
    // Check if ID is valid
    if (!isValidObjectId(id)) {
      return NextResponse.json(
        { success: false, error: 'Invalid ID format' },
        { status: 400 }
      );
    }
    
    // Get request body
    const data = await request.json();
    
    // Find and update {{featureName}&#125;
    const {{featureName}&#125; = await {{pascalCase featureName}&#125;.findByIdAndUpdate(
      id,
      data,
      { new: true, runValidators: true }
    );
    
    // Check if {{featureName}&#125; exists
    if (!{{featureName}&#125;) {
      return NextResponse.json(
        { success: false, error: '{{pascalCase featureName}&#125; not found' },
        { status: 404 }
      );
    }
    
    // Return success response
    return NextResponse.json({
      success: true,
      data: {{featureName}&#125;
    });
  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json(
      { success: false, error: error.message },
      { status: 500 }
    );
  }
}

/**
 * Handle DELETE requests to remove a {{featureName}&#125;
 * 
 * @async
 * @function DELETE
 * @param {Request} request - The incoming request
 * @param {Object} params - Route parameters
 * @param {string} params.id - {{pascalCase featureName}&#125; ID
 * @returns {Promise<NextResponse>} JSON response with success or error
 * 
 * @example
 * // Delete a {{featureName}&#125;
 * DELETE /api/{{featureNamePlural}&#125;/60d21b4667d0d8992e610c85
 */
export async function DELETE(request, { params }) {
  try {
    // Check authentication
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json(
        { success: false, error: 'Authentication required' },
        { status: 401 }
      );
    }
    
    // Connect to database
    await connectDB();
    
    // Get ID from params
    const { id } = params;
    
    // Check if ID is valid
    if (!isValidObjectId(id)) {
      return NextResponse.json(
        { success: false, error: 'Invalid ID format' },
        { status: 400 }
      );
    }
    
    // Find and delete {{featureName}&#125;
    const {{featureName}&#125; = await {{pascalCase featureName}&#125;.findByIdAndDelete(id);
    
    // Check if {{featureName}&#125; exists
    if (!{{featureName}&#125;) {
      return NextResponse.json(
        { success: false, error: '{{pascalCase featureName}&#125; not found' },
        { status: 404 }
      );
    }
    
    // Return success response
    return NextResponse.json({
      success: true,
      message: '{{pascalCase featureName}&#125; deleted successfully'
    });
  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json(
      { success: false, error: error.message },
      { status: 500 }
    );
  }
}