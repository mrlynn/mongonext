/**
 * @file API routes for [[featureNamePlural]] collection
 * @module app/api/[[featureNamePlural]]
 */

import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';
import authOptions from '@/lib/auth/config';
import connectDB from '@/lib/db/connect';
import [[pascalCase featureName]] from '@/models/[[featureName]].model';

/**
 * Handle GET requests to fetch [[featureNamePlural]]
 * Optional query parameters for filtering, pagination, and sorting
 * 
 * @async
 * @function GET
 * @param {Request} request - The incoming request object
 * @returns {Promise<NextResponse>} JSON response with [[featureNamePlural]] data or error
 * 
 * @example
 * // Get all [[featureNamePlural]] with pagination
 * GET /api/[[featureNamePlural]]?page=1&limit=10&sort=name&order=asc
 */
export async function GET(request) {
  try {
    // Connect to database
    await connectDB();
    
    // Get query parameters
    const { searchParams } = new URL(request.url);
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '10');
    const sort = searchParams.get('sort') || 'createdAt';
    const order = searchParams.get('order') === 'asc' ? 1 : -1;
    const search = searchParams.get('search') || '';
    
    // Calculate pagination
    const skip = (page - 1) * limit;
    
    // Build query
    let query = {};
    
    // Add search if provided
    if (search) {
      query = {
        $or: [
          { name: { $regex: search, $options: 'i' } },
          { description: { $regex: search, $options: 'i' } }
        ]
      };
    }
    
    // Get [[featureNamePlural]] with pagination
    const [[[featureNamePlural]]], total] = await Promise.all([
      [[pascalCase featureName]]
        .find(query)
        .sort({ [sort]: order })
        .skip(skip)
        .limit(limit),
      [[pascalCase featureName]].countDocuments(query)
    ]);
    
    // Return success response
    return NextResponse.json({
      success: true,
      data: {
        [[featureNamePlural]]: [[[featureNamePlural]]],
        pagination: {
          total,
          page,
          limit,
          pages: Math.ceil(total / limit)
        }
      }
    });
  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json(
      { success: false, error: error.message },
      { status: 500 }
    );
  }
}

/**
 * Handle POST requests to create a new [[featureName]]
 * 
 * @async
 * @function POST
 * @param {Request} request - The incoming request with [[featureName]] data
 * @returns {Promise<NextResponse>} JSON response with created [[featureName]] or error
 * 
 * @example
 * // Create a new [[featureName]]
 * POST /api/[[featureNamePlural]]
 * {
 *   "name": "Example [[proper featureName]]",
 *   "description": "This is an example [[featureName]]"
 * }
 */
export async function POST(request) {
  try {
    // Check authentication (optional, remove if public access is allowed)
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json(
        { success: false, error: 'Authentication required' },
        { status: 401 }
      );
    }
    
    // Connect to database
    await connectDB();
    
    // Get request body
    const data = await request.json();
    
    // Create new [[featureName]]
    const [[featureName]] = new [[pascalCase featureName]]({
      ...data,
      // Add userId from session if applicable
      userId: session.user.id
    });
    
    // Save to database
    await [[featureName]].save();
    
    // Return success response
    return NextResponse.json(
      { success: true, data: [[featureName]] },
      { status: 201 }
    );
  } catch (error) {
    console.error('API error:', error);
    return NextResponse.json(
      { success: false, error: error.message },
      { status: 500 }
    );
  }
}