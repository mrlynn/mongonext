'use client';

/**
 * @file {{PascalFeatureName}&#125; list component
 * @module components/dashboard/{{featureNamePlural}&#125;/{{PascalFeatureName}&#125;List
 */

import React from 'react';
import {
  Box,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TablePagination,
  IconButton,
  Typography,
  Chip,
  Tooltip,
} from '@mui/material';
import {
  Edit as EditIcon,
  Delete as DeleteIcon,
  Visibility as ViewIcon,
} from '@mui/icons-material';

/**
 * {{PascalFeatureName}&#125; list component
 * Displays a table of {{featureNamePlural}&#125; with actions
 * 
 * @component
 * @param {Object} props - Component props
 * @param {Array} props.{{featureNamePlural}&#125; - Array of {{featureName}&#125; objects
 * @param {Function} props.onItemClick - Handler for when an item is clicked
 * @param {Function} props.onDeleteItem - Handler for when delete is clicked
 * @param {Object} props.pagination - Pagination info
 * @param {number} props.pagination.page - Current page
 * @param {number} props.pagination.limit - Items per page
 * @param {number} props.pagination.total - Total items
 * @param {Function} props.onPageChange - Handler for page change
 * @param {Function} props.onLimitChange - Handler for page size change
 * @returns {React.ReactElement} {{PascalFeatureName}&#125;List component
 */
{{{{raw}&#125;}&#125;
export default function {{PascalFeatureName}&#125;List({
  {{featureNamePlural}&#125; = [],
  onItemClick,
  onDeleteItem,
  pagination = { page: 0, limit: 10, total: 0 },
  onPageChange,
  onLimitChange
}) {
  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };

  const handlePageChange = (event, newPage) => {
    if (onPageChange) {
      onPageChange(newPage + 1);
    }
  };

  const handleLimitChange = (event) => {
    if (onLimitChange) {
      onLimitChange(parseInt(event.target.value, 10));
    }
  };

  if ({{featureNamePlural}&#125;.length === 0) {
    return (
      <Paper sx=&#123;{ p: 3, textAlign: 'center' }&#125;>
        <Typography variant="body1">
          No {{featureNamePlural}&#125; found.
        </Typography>
      </Paper>
    );
  }

  const muiPagination = {
    page: (pagination.page || 1) - 1,
    rowsPerPage: pagination.limit || 10,
    count: pagination.total || 0
  };

  return (
    <Paper sx=&#123;{ width: '100%', overflow: 'hidden' }&#125;>
      <TableContainer>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Name</TableCell>
              <TableCell>Description</TableCell>
              <TableCell>Created</TableCell>
              <TableCell align="right">Actions</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            { {{featureNamePlural}&#125;.map(({{featureName}&#125;) => (
              <TableRow
                key={{{featureName}&#125;._id}
                hover
                onClick={() => onItemClick && onItemClick({{featureName}&#125;._id)}
                sx=&#123;{ cursor: 'pointer' }&#125;
              >
                <TableCell component="th" scope="row">
                  {{featureName}&#125;.name
                </TableCell>
                <TableCell>
                  {{featureName}&#125;.description || 'No description'
                </TableCell>
                <TableCell>
                  {formatDate({{featureName}&#125;.createdAt)}
                </TableCell>
                <TableCell align="right">
                  <Box sx=&#123;{ display: 'flex', justifyContent: 'flex-end' }&#125;>
                    <Tooltip title="View/Edit">
                      <IconButton
                        size="small"
                        onClick={(e) => {
                          e.stopPropagation();
                          onItemClick && onItemClick({{featureName}&#125;._id);
                        }&#125;
                      >
                        <EditIcon fontSize="small" />
                      </IconButton>
                    </Tooltip>
                    {{#if includeDelete}&#125;
                    <Tooltip title="Delete">
                      <IconButton
                        size="small"
                        color="error"
                        onClick={(e) => {
                          e.stopPropagation();
                          onDeleteItem && onDeleteItem({{featureName}&#125;._id);
                        }&#125;
                      >
                        <DeleteIcon fontSize="small" />
                      </IconButton>
                    </Tooltip>
                    {{/if}&#125;
                  </Box>
                </TableCell>
              </TableRow>
            )) }
          </TableBody>
        </Table>
      </TableContainer>

      <TablePagination
        component="div"
        count={muiPagination.count}
        page={muiPagination.page}
        rowsPerPage={muiPagination.rowsPerPage}
        onPageChange={handlePageChange}
        onRowsPerPageChange={handleLimitChange}
        rowsPerPageOptions={[5, 10, 25, 50, 100]}
      />
    </Paper>
  );
}
{{{{/raw}&#125;}&#125;
