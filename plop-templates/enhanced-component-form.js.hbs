'use client';

/**
 * @file {{PascalFeatureName}} form component
 * @module components/dashboard/{{featureNamePlural}}/{{PascalFeatureName}}Form
 */

import React, { useState } from 'react';
import {
  Box,
  Button,
  TextField,
  Paper,
  Typography,
  Grid,
  CircularProgress,
  Alert,
  FormControlLabel,
  Switch,
  Divider,
} from '@mui/material';
import { useRouter } from 'next/navigation';

/**
 * {{PascalFeatureName}} form component
 * Form for creating and editing {{featureNamePlural}}
 * 
 * @component
 * @param {Object} props - Component props
 * @param {Object} [props.{{featureName}}] - Existing {{featureName}} for editing (omit for create mode)
 * @param {Function} props.onSubmit - Function to call on form submission
 * @param {Function} props.onCancel - Function to call when cancel is clicked
 * @returns {React.ReactElement} {{PascalFeatureName}}Form component
 */
export default function {{PascalFeatureName}}Form({
  {{featureName}},
  onSubmit,
  onCancel
}) {
  const router = useRouter();
  const isEditMode = !!{{featureName}};
  
  // Form state
  const [formData, setFormData] = useState({
    name: {{featureName}}?.name || '',
    description: {{featureName}}?.description || '',
    // Add other fields here based on your model
  });
  
  // Form state
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [errors, setErrors] = useState({});
  
  /**
   * Handle form input changes
   * @param {React.ChangeEvent<HTMLInputElement>} e - Input change event
   */
  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    const newValue = type === 'checkbox' ? checked : value;
    
    setFormData(prev => ({
      ...prev,
      [name]: newValue
    }));
    
    // Clear field-specific error when typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
    
    // Clear general error
    if (error) {
      setError('');
    }
  };
  
  /**
   * Validate form data
   * @returns {boolean} True if form is valid
   */
  const validateForm = () => {
    const newErrors = {};
    
    // Validate name
    if (!formData.name.trim()) {
      newErrors.name = 'Name is required';
    }
    
    // Add validation for other fields here
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  
  /**
   * Handle form submission
   * @param {React.FormEvent<HTMLFormElement>} e - Form submission event
   */
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    setIsLoading(true);
    setError('');
    
    try {
      // Call onSubmit with form data
      await onSubmit(formData);
    } catch (err) {
      setError(err.message || 'An error occurred');
    } finally {
      setIsLoading(false);
    }
  };
  
  /**
   * Handle cancel button click
   */
  const handleCancel = () => {
    if (onCancel) {
      onCancel();
    } else {
      router.back();
    }
  };
  
  return (
    <Paper sx="{ p: 3 }">
      {error && (
        <Alert severity="error" sx="{ mb: 3 }">
          {error}
        </Alert>
      )}
      
      <Box component="form" onSubmit={handleSubmit} noValidate>
        <Grid container spacing={3}>
          <Grid item xs={12}>
            <TextField
              fullWidth
              required
              label="Name"
              name="name"
              value={formData.name}
              onChange={handleChange}
              error={!!errors.name}
              helperText={errors.name || ' '}
              disabled={isLoading}
            />
          </Grid>
          
          <Grid item xs={12}>
            <TextField
              fullWidth
              label="Description"
              name="description"
              value={formData.description}
              onChange={handleChange}
              error={!!errors.description}
              helperText={errors.description || ' '}
              disabled={isLoading}
              multiline
              rows={3}
            />
          </Grid>
          
          {/* Add other form fields here based on your model */}
          
          <Grid item xs={12}>
            <Divider sx="{ my: 2 }" />
            <Box sx="{ display: 'flex', justifyContent: 'flex-end', gap: 2 }">
              <Button
                variant="outlined"
                onClick={handleCancel}
                disabled={isLoading}
              >
                Cancel
              </Button>
              <Button
                type="submit"
                variant="contained"
                disabled={isLoading}
                sx="{ position: 'relative' }"
              >
                {isLoading ? (
                  <CircularProgress size={24} sx="{ position: 'absolute' }" />
                ) : isEditMode ? 'Update' : 'Create'}
              </Button>
            </Box>
          </Grid>
        </Grid>
      </Box>
    </Paper>
  );
}