'use client';

/**
 * @file Edit [[featureName]] page
 * @module app/dashboard/[[featureNamePlural]]/[id]/page
 */

import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  Container, 
  Breadcrumbs,
  Link as MuiLink,
  Alert,
  CircularProgress,
  Paper,
  Modal,
  Button,
} from '@mui/material';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import [[PascalFeatureName]]Form from '@/components/dashboard/[[featureNamePlural]]/[[PascalFeatureName]]Form';
import [[PascalFeatureName]]Detail from '@/components/dashboard/[[featureNamePlural]]/[[PascalFeatureName]]Detail';

export default function Edit[[PascalFeatureName]]Page({ params }) {
  const { id } = params;
  const router = useRouter();

  const [[[featureName]]], set[[PascalFeatureName]]] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [isEditing, setIsEditing] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);

  useEffect(() => {
    const fetch[[PascalFeatureName]] = async () => {
      try {
        setLoading(true);
        setError('');
        const response = await fetch(`/api/[[featureNamePlural]]/${id}`);
        const result = await response.json();

        if (!result.success) {
          throw new Error(result.error || '[[pascalCase featureName]] not found');
        }

        set[[PascalFeatureName]](result.data);
      } catch (err) {
        console.error('Error fetching [[featureName]]:', err);
        setError(err.message || 'Failed to load [[featureName]]');
      } finally {
        setLoading(false);
      }
    };

    if (id) {
      fetch[[PascalFeatureName]]();
    }
  }, [id]);

  const handleEdit = () => setIsEditing(true);
  const handleCancelEdit = () => setIsEditing(false);

  const handleSubmit = async (data) => {
    try {
      setError('');
      const response = await fetch(`/api/[[featureNamePlural]]/${id}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });

      const result = await response.json();
      if (!result.success) {
        throw new Error(result.error || 'Failed to update [[featureName]]');
      }

      set[[PascalFeatureName]](result.data);
      setIsEditing(false);
    } catch (err) {
      console.error('Error updating [[featureName]]:', err);
      setError(err.message || 'An error occurred while updating the [[featureName]]');
    }
  };

  const handleDelete = () => setIsDeleteModalOpen(true);
  const handleCancelDelete = () => setIsDeleteModalOpen(false);

  const handleConfirmDelete = async () => {
    try {
      setIsDeleting(true);
      const response = await fetch(`/api/[[featureNamePlural]]/${id}`, { method: 'DELETE' });
      const result = await response.json();

      if (!result.success) {
        throw new Error(result.error || 'Failed to delete [[featureName]]');
      }

      setIsDeleteModalOpen(false);
      router.push('/dashboard/[[featureNamePlural]]');
      router.refresh();
    } catch (err) {
      console.error('Error deleting [[featureName]]:', err);
      setError(err.message || 'An error occurred while deleting the [[featureName]]');
      setIsDeleting(false);
      setIsDeleteModalOpen(false);
    }
  };

  if (loading) {
    return (
      <Container maxWidth="lg">
        <Box sx={{ py: 4, display: 'flex', justifyContent: 'center' }}>
          <CircularProgress />
        </Box>
      </Container>
    );
  }

  if (error && ![[[featureName]]]) {
    return (
      <Container maxWidth="lg">
        <Box sx={{ py: 4 }}>
          <Alert severity="error" sx={{ mb: 3 }}>
            {error}
          </Alert>
          <Button component={Link} href="/dashboard/[[featureNamePlural]]" variant="outlined">
            Back to [[proper featureNamePlural]]
          </Button>
        </Box>
      </Container>
    );
  }

  return (
    <Container maxWidth="lg">
      <Box sx={{ py: 4 }}>
        <Breadcrumbs sx={{ mb: 2 }}>
          <MuiLink component={Link} href="/dashboard" underline="hover" color="inherit">
            Dashboard
          </MuiLink>
          <MuiLink component={Link} href="/dashboard/[[featureNamePlural]]" underline="hover" color="inherit">
            [[proper featureNamePlural]]
          </MuiLink>
          <Typography color="text.primary">[[[featureName]]]?.name || id</Typography>
        </Breadcrumbs>

        <Typography variant="h4" component="h1" gutterBottom>
          {isEditing ? 'Edit' : ''} [[proper featureName]]: [[[featureName]]]?.name
        </Typography>

        {error && (
          <Alert severity="error" sx={{ mb: 3 }}>
            {error}
          </Alert>
        )}

        {isEditing ? (
          <[[PascalFeatureName]]Form 
            [[featureName]]={[[[featureName]]]} 
            onSubmit={handleSubmit} 
            onCancel={handleCancelEdit}
          />
        ) : (
          <[[PascalFeatureName]]Detail 
            [[featureName]]={[[[featureName]]]} 
            onEdit={handleEdit} 
            onDelete={handleDelete}
          />
        )}
      </Box>

      <Modal open={isDeleteModalOpen} onClose={handleCancelDelete} aria-labelledby="delete-modal-title">
        <Paper
          sx={{ 
            position: 'absolute',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
            width: 400,
            p: 4,
            outline: 'none'
          }}
        >
          <Typography id="delete-modal-title" variant="h6" component="h2" gutterBottom>
            Confirm Delete
          </Typography>
          <Typography paragraph>
            Are you sure you want to delete "[[[featureName]]]?.name"? This action cannot be undone.
          </Typography>
          <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2, mt: 3 }}>
            <Button onClick={handleCancelDelete} disabled={isDeleting}>Cancel</Button>
            <Button onClick={handleConfirmDelete} variant="contained" color="error" disabled={isDeleting}>
              {isDeleting ? <CircularProgress size={24} /> : 'Delete'}
            </Button>
          </Box>
        </Paper>
      </Modal>
    </Container>
  );
}
