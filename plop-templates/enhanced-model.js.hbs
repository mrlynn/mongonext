/**
 * @file {{proper featureName}} model definition with mongoose schema
 * @module models/{{featureName}}
 * @description {{description}}
 */

import mongoose from 'mongoose';
const { Schema } = mongoose;

/**
 * {{proper featureName}} schema definition for MongoDB
 * @typedef {Object} {{pascalCase featureName}}Schema
 */
const {{featureName}}Schema = new Schema({
  /**
   * Name of the {{featureName}}
   * @type {String}
   * @required
   */
  name: { 
    type: String, 
    required: [true, 'Name is required'],
    trim: true,
    maxlength: [100, 'Name cannot be more than 100 characters']
  },
  
  /**
   * Description of the {{featureName}}
   * @type {String}
   */
  description: { 
    type: String,
    trim: true,
    maxlength: [500, 'Description cannot be more than 500 characters']
  },
  {{#if (includes fields 'price')}}
  /**
   * Price of the {{featureName}}
   * @type {Number}
   */
  price: {
    type: Number,
    default: 0,
    min: [0, 'Price cannot be negative']
  },
  {{/if}}
  {{#if (includes fields 'isActive')}}
  /**
   * Whether the {{featureName}} is active
   * @type {Boolean}
   */
  isActive: {
    type: Boolean,
    default: true
  },
  {{/if}}
  {{#if (includes fields 'category')}}
  /**
   * Category of the {{featureName}}
   * @type {String}
   */
  category: {
    type: String,
    trim: true
  },
  {{/if}}
  {{#if (includes fields 'tags')}}
  /**
   * Tags associated with the {{featureName}}
   * @type {Array<String>}
   */
  tags: [{
    type: String,
    trim: true
  }],
  {{/if}}
  {{#if (includes fields 'image')}}
  /**
   * Image URL for the {{featureName}}
   * @type {String}
   */
  image: {
    type: String,
    trim: true
  },
  {{/if}}
  {{#if (includes fields 'userId')}}
  /**
   * User who created/owns this {{featureName}}
   * @type {mongoose.Schema.Types.ObjectId}
   * @ref 'User'
   */
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  {{/if}}
  
  // Add your custom fields here
}, {
  /**
   * Adds createdAt and updatedAt timestamps
   * @type {Object}
   * @property {Boolean} timestamps - Enable automatic timestamps
   */
  timestamps: {{includeTimestamps}}
});

// Create indexes for better query performance
{{featureName}}Schema.index({ name: 1 });
{{#if (includes fields 'userId')}}
{{featureName}}Schema.index({ userId: 1 });
{{/if}}
{{#if (includes fields 'category')}}
{{featureName}}Schema.index({ category: 1 });
{{/if}}

/**
 * {{proper featureName}} model compiled from schema
 * @type {mongoose.Model}
 */
const {{pascalCase featureName}} = mongoose.models.{{pascalCase featureName}} || mongoose.model('{{pascalCase featureName}}', {{featureName}}Schema);

export default {{pascalCase featureName}};