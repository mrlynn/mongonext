/**
 * @file <%= properFeatureName %> API route for individual items
 * @module app/api/<%= featureNamePlural %>/[id]/route
 */

import { NextResponse } from 'next/server';
import connectDB from '@/lib/mongodb';
import <%= PascalFeatureName %> from '@/models/<%= featureName %>.model';

/**
 * GET handler for a single <%= featureName %>
 * Returns a <%= featureName %> by ID
 * 
 * @param {Request} request - The incoming request
 * @param {Object} params - Route parameters
 * @param {string} params.id - <%= featureName %> ID
 * @returns {NextResponse} JSON response with <%= featureName %> data
 */
export async function GET(request, { params }) {
  try {
    await connectDB();
    
    const { id } = params;
    
    // Find <%= featureName %> by ID
    const <%= featureName %> = await <%= PascalFeatureName %>.findById(id);
    
    if (!<%= featureName %>) {
      return NextResponse.json(
        { success: false, error: '<%= properFeatureName %> not found' },
        { status: 404 }
      );
    }
    
    return NextResponse.json({
      success: true,
      data: <%= featureName %>
    });
  } catch (error) {
    console.error('Error fetching <%= featureName %>:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to fetch <%= featureName %>' },
      { status: 500 }
    );
  }
}

/**
 * PATCH handler for a single <%= featureName %>
 * Updates a <%= featureName %> by ID
 * 
 * @param {Request} request - The incoming request
 * @param {Object} params - Route parameters
 * @param {string} params.id - <%= featureName %> ID
 * @returns {NextResponse} JSON response with updated <%= featureName %> data
 */
export async function PATCH(request, { params }) {
  try {
    await connectDB();
    
    const { id } = params;
    const body = await request.json();
    
    // Find and update <%= featureName %>
    const <%= featureName %> = await <%= PascalFeatureName %>.findByIdAndUpdate(
      id,
      body,
      { new: true, runValidators: true }
    );
    
    if (!<%= featureName %>) {
      return NextResponse.json(
        { success: false, error: '<%= properFeatureName %> not found' },
        { status: 404 }
      );
    }
    
    return NextResponse.json({
      success: true,
      data: <%= featureName %>
    });
  } catch (error) {
    console.error('Error updating <%= featureName %>:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to update <%= featureName %>' },
      { status: 500 }
    );
  }
}

/**
 * DELETE handler for a single <%= featureName %>
 * Deletes a <%= featureName %> by ID
 * 
 * @param {Request} request - The incoming request
 * @param {Object} params - Route parameters
 * @param {string} params.id - <%= featureName %> ID
 * @returns {NextResponse} JSON response with success message
 */
export async function DELETE(request, { params }) {
  try {
    await connectDB();
    
    const { id } = params;
    
    // Find and delete <%= featureName %>
    const <%= featureName %> = await <%= PascalFeatureName %>.findByIdAndDelete(id);
    
    if (!<%= featureName %>) {
      return NextResponse.json(
        { success: false, error: '<%= properFeatureName %> not found' },
        { status: 404 }
      );
    }
    
    return NextResponse.json({
      success: true,
      message: '<%= properFeatureName %> deleted successfully'
    });
  } catch (error) {
    console.error('Error deleting <%= featureName %>:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to delete <%= featureName %>' },
      { status: 500 }
    );
  }
} 